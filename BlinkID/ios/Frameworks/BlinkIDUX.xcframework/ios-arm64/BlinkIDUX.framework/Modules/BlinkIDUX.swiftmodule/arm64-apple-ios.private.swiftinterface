// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-upcoming-feature ExistentialAny -module-name BlinkIDUX -package-name blinkid_ios
import AVFoundation
import BlinkID
import Combine
import CoreImage
import CoreVideo
import DeveloperToolsSupport
import Foundation
import Foundation/*.Bundle*/
import Foundation/*.ProcessInfo*/
import Foundation/*.URL*/
import Network
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
public actor BlinkIDEventStream : BlinkIDUX.EventStream {
  public init()
  public func send(_ events: [BlinkIDUX.UIEvent])
  public var stream: _Concurrency.AsyncStream<[BlinkIDUX.UIEvent]> {
    get
  }
  public typealias Event = BlinkIDUX.UIEvent
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
public protocol BlinkIDClassFilter {
  func classAllowed(classInfo: BlinkID.BlinkIDSDK.DocumentClassInfo) -> Swift.Bool
}
public actor BlinkIDAnalyzer : BlinkIDUX.CameraFrameAnalyzer {
  public typealias Event = BlinkIDUX.UIEvent
  public typealias Result = BlinkIDUX.ScanningResult<BlinkID.BlinkIDScanningResult, BlinkIDUX.BlinkIDScanningAlertType>
  public typealias Frame = BlinkID.CameraFrame
  public var stepTimeoutDuration: Foundation.TimeInterval {
    get
  }
  public init(sdk: BlinkID.BlinkIDSdk, blinkIdSessionSettings: BlinkID.BlinkIDSessionSettings = BlinkIDSessionSettings(inputImageSource: .video), eventStream: BlinkIDUX.BlinkIDEventStream, classFilter: (any BlinkIDUX.BlinkIDClassFilter)? = nil) async throws
  public func analyze(image: BlinkIDUX.BlinkIDAnalyzer.Frame) async
  public func cancel()
  public func result() async -> BlinkIDUX.ScanningResult<BlinkID.BlinkIDScanningResult, BlinkIDUX.BlinkIDScanningAlertType>
  public func pause()
  public func resume()
  public func restart() throws
  public func end() async
  nonisolated public var events: any BlinkIDUX.EventStream<BlinkIDUX.UIEvent> {
    get
  }
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
public struct BlinkIDResultState {
  public let scanningResult: BlinkID.BlinkIDScanningResult?
}
public enum BlinkIDScanningAlertType : Swift.Sendable, BlinkIDUX.AlertTypeProtocol {
  case timeout
  case disallowedClass
  public var title: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public static func == (a: BlinkIDUX.BlinkIDScanningAlertType, b: BlinkIDUX.BlinkIDScanningAlertType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor final public class BlinkIDUXModel : BlinkIDUX.ScanningViewModel<BlinkID.BlinkIDScanningResult, BlinkIDUX.BlinkIDScanningAlertType> {
  @Combine.Published @_projectedValueProperty($result) @_Concurrency.MainActor final public var result: BlinkIDUX.BlinkIDResultState? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor final public var $result: Combine.Published<BlinkIDUX.BlinkIDResultState?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @_Concurrency.MainActor override public init(analyzer: any BlinkIDUX.CameraFrameAnalyzer<BlinkID.CameraFrame, BlinkIDUX.UIEvent>, shouldShowIntroductionAlert: Swift.Bool = true, showHelpButton: Swift.Bool = true)
  @_Concurrency.MainActor override final public func analyze() async
  @_Concurrency.MainActor override final public func processAnalyzerResult() async
  @_Concurrency.MainActor override final public func licenseErrorAlertDismised()
  @_Concurrency.MainActor override final public func scanningDidCancel()
  @_Concurrency.MainActor override final public func timeoutAlertDismised()
  @_Concurrency.MainActor final public func finishScan() async
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct BlinkIDUXView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(viewModel: BlinkIDUX.BlinkIDUXModel)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s9BlinkIDUX0A8IDUXViewV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers final public class BlinkIDTheme : BlinkIDUX.UXThemeProtocol {
  public static let shared: BlinkIDUX.BlinkIDTheme
  final public var alertTitleColor: SwiftUICore.Color
  final public var alertTitleFont: SwiftUICore.Font
  final public var alertDescriptionColor: SwiftUICore.Color
  final public var alertDescriptionFont: SwiftUICore.Font
  final public var alertButtonColor: SwiftUICore.Color
  final public var alertButtonFont: SwiftUICore.Font
  final public var alertBackgroundColor: SwiftUICore.Color
  final public var onboardingSheetTitleColor: SwiftUICore.Color
  final public var onboardingSheetTitleFont: SwiftUICore.Font
  final public var onboardingSheetDescriptionColor: SwiftUICore.Color
  final public var onboardingSheetDescriptionFont: SwiftUICore.Font
  final public var onboardingSheetButtonColor: SwiftUICore.Color
  final public var onboardingSheetButtonFont: SwiftUICore.Font
  final public var onboardingSheetPageIndicatorColor: SwiftUICore.Color
  final public var onboardingSheetBackgroundColor: SwiftUICore.Color
  final public var reticleTooltipFont: SwiftUICore.Font
  final public var helpButtonForegroundColor: SwiftUICore.Color
  final public var helpButtonBackgroundColor: SwiftUICore.Color
  final public var helpButtonTooltipForegroundColor: SwiftUICore.Color
  final public var helpButtonTooltipBackgroundColor: SwiftUICore.Color
  final public var toastBackgroundColor: SwiftUICore.Color
  @objc deinit
}
public protocol ScanningResultProtocol : Swift.Sendable {
  associatedtype Result : Swift.Sendable
  nonisolated var scanResult: Self.Result? { get }
}
public enum ScanningResult<T, U> : BlinkIDUX.ScanningResultProtocol where T : Swift.Sendable, U : Swift.Sendable {
  public typealias Result = T
  case completed(T)
  case interrupted(U)
  case cancelled
  case ended
  nonisolated public var scanResult: T? {
    get
  }
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol EventStream<Event> : Swift.Sendable {
  associatedtype Event : Swift.Sendable
  var stream: _Concurrency.AsyncStream<[Self.Event]> { get async }
}
#else
public protocol EventStream : Swift.Sendable {
  associatedtype Event : Swift.Sendable
  var stream: _Concurrency.AsyncStream<[Self.Event]> { get async }
}
#endif
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol CameraFrameAnalyzer<Frame, Event> : Swift.Sendable {
  associatedtype Result : BlinkIDUX.ScanningResultProtocol
  associatedtype Frame : Swift.Sendable
  associatedtype Event : Swift.Sendable
  func analyze(image: Self.Frame) async
  func cancel() async
  func pause() async
  func resume() async
  func restart() async throws
  func end() async
  func result() async -> Self.Result
  var events: any BlinkIDUX.EventStream<Self.Event> { get }
  var stepTimeoutDuration: Foundation.TimeInterval { get async }
}
#else
public protocol CameraFrameAnalyzer : Swift.Sendable {
  associatedtype Result : BlinkIDUX.ScanningResultProtocol
  associatedtype Frame : Swift.Sendable
  associatedtype Event : Swift.Sendable
  func analyze(image: Self.Frame) async
  func cancel() async
  func pause() async
  func resume() async
  func restart() async throws
  func end() async
  func result() async -> Self.Result
  var events: any BlinkIDUX.EventStream<Self.Event> { get }
  var stepTimeoutDuration: Foundation.TimeInterval { get async }
}
#endif
public enum PassportOrientation : Swift.Sendable, Swift.Equatable {
  case none
  case left90
  case right90
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BlinkIDUX.PassportOrientation, b: BlinkIDUX.PassportOrientation) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum DocumentSide : Swift.Sendable, Swift.Equatable {
  case front
  case back
  case barcode
  case passport(BlinkIDUX.PassportOrientation)
  public static func == (a: BlinkIDUX.DocumentSide, b: BlinkIDUX.DocumentSide) -> Swift.Bool
}
@_Concurrency.MainActor final public class Camera : BlinkIDUX.CameraModel {
  @Combine.Published @_projectedValueProperty($status) @_Concurrency.MainActor final public var status: BlinkIDUX.CameraStatus {
    get
  }
  @_Concurrency.MainActor final public var $status: Combine.Published<BlinkIDUX.CameraStatus>.Publisher {
    get
  }
  @_Concurrency.MainActor final public var error: (any Swift.Error)? {
    get
  }
  @_Concurrency.MainActor final public var isSwitchingModes: Swift.Bool {
    get
  }
  @_Concurrency.MainActor final public var orientation: AVFoundation.AVCaptureVideoOrientation {
    get
  }
  @_Concurrency.MainActor final public var previewSource: any BlinkIDUX.PreviewSource {
    get
  }
  @_Concurrency.MainActor final public var isTorchSupported: Swift.Bool {
    get
  }
  @_Concurrency.MainActor public init()
  @objc deinit
  @_Concurrency.MainActor final public func start() async
  @_Concurrency.MainActor final public func stop() async
  @_Concurrency.MainActor final public func focusAndExpose(at point: CoreFoundation.CGPoint) async
  @_Concurrency.MainActor final public var sampleBuffer: _Concurrency.AsyncStream<BlinkIDUX.SampleBuffer> {
    get async
  }
  @_Concurrency.MainActor final public var isTorchEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor final public func stopRotationCoordinator()
}
@_hasMissingDesignatedInitializers final public class SampleBuffer : @unchecked Swift.Sendable {
  final public let buffer: CoreMedia.CMSampleBuffer
  @objc deinit
}
@_Concurrency.MainActor public protocol CameraModel : AnyObject {
  @_Concurrency.MainActor var status: BlinkIDUX.CameraStatus { get }
  @_Concurrency.MainActor var previewSource: any BlinkIDUX.PreviewSource { get }
  @_Concurrency.MainActor var isSwitchingModes: Swift.Bool { get }
  @_Concurrency.MainActor func start() async
  @_Concurrency.MainActor func stop() async
  @_Concurrency.MainActor func focusAndExpose(at point: CoreFoundation.CGPoint) async
  @_Concurrency.MainActor var error: (any Swift.Error)? { get }
  @_Concurrency.MainActor var isTorchSupported: Swift.Bool { get }
  @_Concurrency.MainActor var isTorchEnabled: Swift.Bool { get set }
  @_Concurrency.MainActor var orientation: AVFoundation.AVCaptureVideoOrientation { get }
  @_Concurrency.MainActor var sampleBuffer: _Concurrency.AsyncStream<BlinkIDUX.SampleBuffer> { get async }
}
public enum CameraStatus {
  case unknown
  case unauthorized
  case failed
  case running
  case interrupted
  case stopped
  public static func == (a: BlinkIDUX.CameraStatus, b: BlinkIDUX.CameraStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CaptureMode : Swift.String, Swift.Identifiable, Swift.CaseIterable {
  public var id: BlinkIDUX.CaptureMode {
    get
  }
  case video
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BlinkIDUX.CaptureMode]
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = BlinkIDUX.CaptureMode
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [BlinkIDUX.CaptureMode] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum CaptureActivity {
  case idle
  public static func == (a: BlinkIDUX.CaptureActivity, b: BlinkIDUX.CaptureActivity) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}

@_Concurrency.MainActor @preconcurrency public struct CameraPreview : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency public init(source: any BlinkIDUX.PreviewSource, videoGravity: AVFoundation.AVLayerVideoGravity = .resizeAspectFill)
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: BlinkIDUX.CameraPreview.Context) -> BlinkIDUX.CameraPreview.PreviewView
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ previewView: BlinkIDUX.CameraPreview.PreviewView, context: BlinkIDUX.CameraPreview.Context)
  @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class PreviewView : UIKit.UIView, BlinkIDUX.PreviewTarget {
    @_Concurrency.MainActor @preconcurrency @objc override dynamic public class var layerClass: Swift.AnyClass {
      @objc get
    }
    @_Concurrency.MainActor @preconcurrency public var videoGravity: AVFoundation.AVLayerVideoGravity {
      get
      set
    }
    nonisolated public func setSession(_ session: AVFoundation.AVCaptureSession)
    @objc deinit
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Coordinator = Swift.Void
  @available(iOS 13.0, tvOS 13.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias UIViewType = BlinkIDUX.CameraPreview.PreviewView
}
public protocol PreviewSource : Swift.Sendable {
  func connect(to target: any BlinkIDUX.PreviewTarget)
}
public protocol PreviewTarget {
  func setSession(_ session: AVFoundation.AVCaptureSession)
}
@_Concurrency.MainActor public struct CameraView<Camera> where Camera : BlinkIDUX.CameraModel {
  @_Concurrency.MainActor public init(camera: Camera)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s9BlinkIDUX10CameraViewV4bodyQrvp", 0) __<Camera>
}
@_Concurrency.MainActor public class NetworkMonitor : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($isConnected) @_Concurrency.MainActor public var isConnected: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $isConnected: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @_Concurrency.MainActor public var isOffline: Swift.Bool {
    get
  }
  @_Concurrency.MainActor public init()
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
@_Concurrency.MainActor @preconcurrency public struct NoInternetView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(retryAction: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s9BlinkIDUX14NoInternetViewV4bodyQrvp", 0) __
}
public protocol AlertTypeProtocol {
  var title: Swift.String { get }
  var description: Swift.String { get }
}
@_Concurrency.MainActor public class ScanningViewModel<T, U> : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($scanningResult) @_Concurrency.MainActor public var scanningResult: T? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $scanningResult: Combine.Published<T?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($alertType) @_Concurrency.MainActor public var alertType: U? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $alertType: Combine.Published<U?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($roi) @_Concurrency.MainActor public var roi: BlinkID.RegionOfInterest {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $roi: Combine.Published<BlinkID.RegionOfInterest>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($reticleState) @_Concurrency.MainActor public var reticleState: BlinkIDUX.ReticleState {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $reticleState: Combine.Published<BlinkIDUX.ReticleState>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isTorchOn) @_Concurrency.MainActor public var isTorchOn: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
  }
  @_Concurrency.MainActor public var $isTorchOn: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isToastVisible) @_Concurrency.MainActor public var isToastVisible: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $isToastVisible: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($showIntroductionAlert) @_Concurrency.MainActor public var showIntroductionAlert: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
  }
  @_Concurrency.MainActor public var $showIntroductionAlert: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @_Concurrency.MainActor public init(analyzer: any BlinkIDUX.CameraFrameAnalyzer<BlinkID.CameraFrame, BlinkIDUX.UIEvent>, shouldShowIntroductionAlert: Swift.Bool = false, showHelpButton: Swift.Bool = false)
  @objc deinit
  @_Concurrency.MainActor public func analyze() async
  @_Concurrency.MainActor public func processAnalyzerResult() async
  @_Concurrency.MainActor public func licenseErrorAlertDismised()
  @_Concurrency.MainActor public func timeoutAlertDismised()
  @_Concurrency.MainActor public func presentAlert()
  @_Concurrency.MainActor public func dismissAlert()
  @_Concurrency.MainActor public func stopEventHandling()
  @_Concurrency.MainActor public func pauseScanning()
  @_Concurrency.MainActor public func resumeScanning()
  @_Concurrency.MainActor public func restartScanning()
  @_Concurrency.MainActor public func scanningDidCancel()
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
public protocol UXThemeProtocol {
  var alertTitleColor: SwiftUICore.Color { get }
  var alertTitleFont: SwiftUICore.Font { get }
  var alertDescriptionColor: SwiftUICore.Color { get }
  var alertDescriptionFont: SwiftUICore.Font { get }
  var alertButtonColor: SwiftUICore.Color { get }
  var alertButtonFont: SwiftUICore.Font { get }
  var alertBackgroundColor: SwiftUICore.Color { get }
  var onboardingSheetTitleColor: SwiftUICore.Color { get }
  var onboardingSheetTitleFont: SwiftUICore.Font { get }
  var onboardingSheetDescriptionColor: SwiftUICore.Color { get }
  var onboardingSheetDescriptionFont: SwiftUICore.Font { get }
  var onboardingSheetButtonColor: SwiftUICore.Color { get }
  var onboardingSheetButtonFont: SwiftUICore.Font { get }
  var onboardingSheetPageIndicatorColor: SwiftUICore.Color { get }
  var onboardingSheetBackgroundColor: SwiftUICore.Color { get }
  var reticleTooltipFont: SwiftUICore.Font { get }
  var helpButtonForegroundColor: SwiftUICore.Color { get }
  var helpButtonBackgroundColor: SwiftUICore.Color { get }
  var helpButtonTooltipForegroundColor: SwiftUICore.Color { get }
  var helpButtonTooltipBackgroundColor: SwiftUICore.Color { get }
  var toastBackgroundColor: SwiftUICore.Color { get }
}
extension AVFoundation.AVCaptureVideoOrientation {
  public func toCameraFrameVideoOrientation() -> BlinkID.CameraFrameVideoOrientation
  public static func fromCameraFrameVideoOrientation(_ orientation: BlinkID.CameraFrameVideoOrientation) -> AVFoundation.AVCaptureVideoOrientation
}
public enum MicroblinkColor : Swift.String {
  case secondary
  case primary
  case tooltipBackground
  case helpBackground
  case background
  case needHelpTooltipBackground
  case toastBackgroundColor
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SwiftUICore.Color {
  public init(_ mbColor: BlinkIDUX.MicroblinkColor)
}
extension SwiftUICore.Animation {
  public static func easeOutExpo(duration: Foundation.TimeInterval) -> SwiftUICore.Animation
}
public enum ReticleState {
  case front
  case back
  case barcode
  case detecting
  case flip
  case error(Swift.String)
  case inactive
  case passport(Swift.String)
  case inactiveWithMessage(Swift.String)
  public static func == (a: BlinkIDUX.ReticleState, b: BlinkIDUX.ReticleState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UIEvent : Swift.Equatable, Swift.Sendable {
  case requestDocumentSide(side: BlinkIDUX.DocumentSide)
  case wrongSide
  case wrongSidePassport(passportOrientation: BlinkIDUX.PassportOrientation)
  case blur
  case glare
  case occlusion
  case tilt
  case tooClose
  case tooFar
  case tooCloseToEdge
  case notFullyVisible
  case tooDark
  case tooBright
  case facePhotoNotFullyVisible
  public static func == (a: BlinkIDUX.UIEvent, b: BlinkIDUX.UIEvent) -> Swift.Bool
}
extension BlinkIDUX.BlinkIDScanningAlertType : Swift.Equatable {}
extension BlinkIDUX.BlinkIDScanningAlertType : Swift.Hashable {}
extension BlinkIDUX.BlinkIDUXView : Swift.Sendable {}
extension BlinkIDUX.PassportOrientation : Swift.Hashable {}
extension BlinkIDUX.Camera : Swift.Sendable {}
extension BlinkIDUX.CameraStatus : Swift.Equatable {}
extension BlinkIDUX.CameraStatus : Swift.Hashable {}
extension BlinkIDUX.CaptureMode : Swift.Equatable {}
extension BlinkIDUX.CaptureMode : Swift.Hashable {}
extension BlinkIDUX.CaptureMode : Swift.RawRepresentable {}
extension BlinkIDUX.CaptureActivity : Swift.Equatable {}
extension BlinkIDUX.CaptureActivity : Swift.Hashable {}
extension BlinkIDUX.CameraPreview : Swift.Sendable {}
extension BlinkIDUX.CameraView : SwiftUICore.View {}
extension BlinkIDUX.CameraView : Swift.Sendable {}
extension BlinkIDUX.NetworkMonitor : Swift.Sendable {}
extension BlinkIDUX.NoInternetView : Swift.Sendable {}
extension BlinkIDUX.ScanningViewModel : Swift.Sendable {}
extension BlinkIDUX.MicroblinkColor : Swift.Equatable {}
extension BlinkIDUX.MicroblinkColor : Swift.Hashable {}
extension BlinkIDUX.MicroblinkColor : Swift.RawRepresentable {}
extension BlinkIDUX.ReticleState : Swift.Hashable {}
extension BlinkIDUX.ReticleState : Swift.Equatable {}
